{{> head title="Schedules"}}
{{> sidebar active=active user=user}}

<main class="main-content min-h-screen p-8 animate-page">
  <div class="max-w-7xl mx-auto">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between mb-6">
        <div>
          <h1 class="text-3xl font-semibold text-gray-900 mb-1">Schedules</h1>
          <p class="text-gray-600 text-sm">Manage room schedules and recurring events</p>
        </div>
        <button id="openAddModal" class="flex items-center gap-2 px-5 py-2.5 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg shadow-sm transition-all hover:shadow-md font-medium text-sm">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"/>
          </svg>
          <span>Add Schedule</span>
        </button>
      </div>
    </div>

    <!-- Calendar Container -->
    <div class="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden mb-8">
      <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
        <h3 class="font-semibold text-gray-900">Room Schedule Calendar</h3>
      </div>
      <div class="p-6">
        <div id="calendar" class="w-full" style="height: 100vh;"></div>
      </div>
    </div>

    <!-- Schedules DataTable -->
    <div class="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
        <div class="flex items-center justify-between">
          <h3 class="font-semibold text-gray-900">All Schedules</h3>
          <div class="flex items-center gap-3">
            <div class="text-sm text-gray-600">
              <span id="scheduleCount">0</span> schedules
            </div>
            <div class="flex items-center gap-2">
              <button id="exportProgramSchedules" class="flex items-center gap-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm font-medium transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
                Export by Program
              </button>
              <button id="exportProfessorSchedules" class="flex items-center gap-2 px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm font-medium transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
                Export by Professor
              </button>
            </div>
          </div>
        </div>
      </div>
      <div class="p-6">
        <div class="overflow-x-auto">
          <table id="schedulesTable" class="w-full text-sm text-left text-gray-500">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
              <tr>
                <th scope="col" class="px-6 py-3">Room</th>
                <th scope="col" class="px-6 py-3">Course</th>
                <th scope="col" class="px-6 py-3">Program</th>
                <th scope="col" class="px-6 py-3">Year & Section</th>
                <th scope="col" class="px-6 py-3">Unit</th>
                <th scope="col" class="px-6 py-3">Faculty</th>
                <th scope="col" class="px-6 py-3">Date Range</th>
                <th scope="col" class="px-6 py-3">Day</th>
                <th scope="col" class="px-6 py-3">Time</th>
                <th scope="col" class="px-6 py-3">Room Type</th>
                <th scope="col" class="px-6 py-3">Actions</th>
              </tr>
            </thead>
            <tbody id="schedulesTableBody">
              <!-- Data will be loaded here -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Add Schedule Modal -->
  <div id="addModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden backdrop-blur-sm">
    <div class="bg-white rounded-xl shadow-2xl w-11/12 md:w-2/3 lg:w-1/2 max-w-2xl max-h-[90vh] overflow-y-auto">
      <div class="sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between">
        <h3 class="text-xl font-semibold text-gray-900">Add Schedule</h3>
        <button id="closeAddModal" class="text-gray-400 hover:text-gray-600 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      <form id="addScheduleForm" class="p-6 space-y-5">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Room</label>
            <select id="room_id" name="room_id" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" required>
              <option value="">Select a room...</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Course</label>
            <input name="course" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" placeholder="e.g., CS101" required />
          </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Program</label>
            <input name="program" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" placeholder="e.g., Computer Science" />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Year</label>
            <input name="year" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" placeholder="e.g., 3" />
          </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Section</label>
            <input name="section" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" placeholder="e.g., F2" />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Unit</label>
            <input name="unit" type="number" min="1" max="6" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" placeholder="e.g., 3" />
          </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Faculty Name</label>
            <input name="faculty_name" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" placeholder="e.g., Prof. John Doe" required />
          </div>
          <div class="flex items-end">
            <label class="inline-flex items-center gap-2 text-sm text-gray-700">
              <input name="is_recurring" type="checkbox" class="rounded border-gray-300 text-emerald-600 focus:ring-emerald-500" />
              Weekly Recurring
            </label>
          </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Start Date</label>
            <input name="start_date" type="date" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" required />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Last Date</label>
            <input name="last_date" type="date" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" required />
          </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Day of Week</label>
            <select name="day_of_week" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" required>
              <option value="">Select day...</option>
              <option value="Monday">Monday</option>
              <option value="Tuesday">Tuesday</option>
              <option value="Wednesday">Wednesday</option>
              <option value="Thursday">Thursday</option>
              <option value="Friday">Friday</option>
              <option value="Saturday">Saturday</option>
              <option value="Sunday">Sunday</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">Start Time</label>
            <input name="start_time" type="time" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" required />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1.5">End Time</label>
            <input name="end_time" type="time" class="w-full border border-gray-300 rounded-lg px-4 py-2.5 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent" required />
          </div>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1.5">Color</label>
          <input name="color_code" type="color" value="#10B981" class="h-12 w-20 border border-gray-300 rounded-lg cursor-pointer" />
        </div>
        <div class="flex items-center justify-end gap-3 pt-4 border-t border-gray-200">
          <button type="button" id="cancelAdd" class="px-5 py-2.5 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 font-medium text-sm">
            Cancel
          </button>
          <button type="submit" class="px-5 py-2.5 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg font-medium text-sm shadow-sm">
            Save Schedule
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- DataTable CSS -->
  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/dataTables.tailwindcss.min.css">
  <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.dataTables.min.css">
  <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.dataTables.min.css">

  <!-- Custom Calendar Styling -->
  <style>
    /* FullCalendar Custom Styling to match design system */
    .fc {
      font-family: inherit;
    }
    
    /* Header styling */
    .fc-header-toolbar {
      margin-bottom: 1.5rem;
      padding: 1rem;
      background: #f8fafc;
      border-radius: 0.5rem;
      border: 1px solid #e2e8f0;
    }
    
    .fc-toolbar-title {
      font-size: 1.5rem;
      font-weight: 600;
      color: #1f2937;
    }
    
    /* Button styling */
    .fc-button {
      background: #10b981 !important;
      border: 1px solid #10b981 !important;
      color: white !important;
      border-radius: 0.5rem !important;
      font-weight: 500 !important;
      padding: 0.5rem 1rem !important;
      font-size: 0.875rem !important;
      transition: all 0.2s !important;
    }
    
    .fc-button:hover {
      background: #059669 !important;
      border-color: #059669 !important;
      transform: translateY(-1px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }
    
    .fc-button:focus {
      outline: none !important;
      box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1) !important;
    }
    
    .fc-button:disabled {
      background: #9ca3af !important;
      border-color: #9ca3af !important;
      cursor: not-allowed !important;
    }
    
    .fc-button-active {
      background: #047857 !important;
      border-color: #047857 !important;
    }
    
    /* Today button special styling */
    .fc-today-button {
      background: #374151 !important;
      border-color: #374151 !important;
    }
    
    .fc-today-button:hover {
      background: #1f2937 !important;
      border-color: #1f2937 !important;
    }
    
    /* Calendar grid styling */
    .fc-daygrid-day {
      border: 1px solid #e5e7eb !important;
    }
    
    .fc-daygrid-day:hover {
      background: #f9fafb !important;
    }
    
    .fc-day-today {
      background: #f0fdf4 !important;
    }
    
    .fc-day-today .fc-daygrid-day-number {
      color: #10b981 !important;
      font-weight: 600 !important;
    }
    
    /* Day headers */
    .fc-col-header-cell {
      background: #f3f4f6 !important;
      border: 1px solid #e5e7eb !important;
      padding: 0.75rem !important;
      font-weight: 600 !important;
      color: #374151 !important;
      font-size: 0.875rem !important;
    }
    
    /* Event styling */
    .fc-event {
      border: none !important;
      border-radius: 0.375rem !important;
      padding: 0.25rem 0.5rem !important;
      font-size: 0.75rem !important;
      font-weight: 500 !important;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1) !important;
      transition: all 0.2s !important;
    }
    
    .fc-event:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1) !important;
    }
    
    /* Time grid styling */
    .fc-timegrid-slot {
      border-color: #e5e7eb !important;
    }
    
    .fc-timegrid-slot-label {
      color: #6b7280 !important;
      font-size: 0.75rem !important;
    }
    
    .fc-timegrid-axis {
      border-color: #e5e7eb !important;
    }
    
    /* Now indicator */
    .fc-timegrid-now-indicator-line {
      border-color: #ef4444 !important;
      border-width: 2px !important;
    }
    
    /* Scrollbar styling */
    .fc-scroller::-webkit-scrollbar {
      width: 6px;
    }
    
    .fc-scroller::-webkit-scrollbar-track {
      background: #f1f5f9;
      border-radius: 3px;
    }
    
    .fc-scroller::-webkit-scrollbar-thumb {
      background: #cbd5e1;
      border-radius: 3px;
    }
    
    .fc-scroller::-webkit-scrollbar-thumb:hover {
      background: #94a3b8;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .fc-header-toolbar {
        flex-direction: column;
        gap: 1rem;
      }
      
      .fc-toolbar-chunk {
        display: flex;
        justify-content: center;
      }
      
      .fc-button {
        font-size: 0.75rem !important;
        padding: 0.375rem 0.75rem !important;
      }
      
      /* Adjust calendar height for smaller screens */
      #calendar {
        height: 100vh !important;
      }
    }
  </style>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const calendarEl = document.getElementById('calendar');
      const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'timeGridWeek',
        headerToolbar: {
          left: 'prev,next today',
          center: 'title',
          right: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        height: '85vh', // Increased height
        nowIndicator: true,
        slotMinTime: '06:00:00',
        slotMaxTime: '21:00:00',
        expandRows: true,
        events: '/schedules/events',
      });
      calendar.render();

      const addModal = document.getElementById('addModal');
      const openBtn = document.getElementById('openAddModal');
      const closeBtn = document.getElementById('closeAddModal');
      const cancelBtn = document.getElementById('cancelAdd');
      const form = document.getElementById('addScheduleForm');
      const roomSelect = form.querySelector('select[name="room_id"]');

      // Load rooms into dropdown
      async function loadRooms() {
        try {
          const response = await fetch('/rooms/all');
          const rooms = await response.json();
          
          roomSelect.innerHTML = '<option value="">Select a room</option>';
          rooms.forEach(room => {
            const option = document.createElement('option');
            option.value = room.id;
            option.textContent = `${room.name} (${room.capacity} seats) - Building: ${room.name || 'Unknown'}`;
            roomSelect.appendChild(option);
          });
        } catch (error) {
          console.error('Error loading rooms:', error);
        }
      }

      function openModal(){ 
        addModal.classList.remove('hidden'); 
        addModal.classList.add('flex');
        loadRooms(); // Load rooms when modal opens
      }
      function closeModal(){ 
        addModal.classList.add('hidden'); 
        addModal.classList.remove('flex');
        form.reset();
        // Reset edit state
        form.removeAttribute('data-edit-id');
        document.querySelector('#addModal h3').textContent = 'Add Schedule';
      }

      openBtn.addEventListener('click', openModal);
      closeBtn.addEventListener('click', closeModal);
      cancelBtn.addEventListener('click', closeModal);

      // Export button event listeners
      document.getElementById('exportProgramSchedules').addEventListener('click', () => {
        showExportModal('program');
      });

      document.getElementById('exportProfessorSchedules').addEventListener('click', () => {
        showExportModal('professor');
      });

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        let payload = Object.fromEntries(formData.entries());
        payload.is_recurring = form.is_recurring.checked;

        // For non-recurring, set last_date to start_date
        if (!payload.is_recurring) {
          payload.last_date = payload.start_date;
        }

        // Validate date range
        if (new Date(payload.start_date) > new Date(payload.last_date)) {
          Swal.fire({ icon: 'error', title: 'Invalid Date Range', text: 'Start date cannot be after last date' });
          return;
        }

        // Check if we're editing or adding
        const editId = form.getAttribute('data-edit-id');
        const isEdit = editId !== null;
        
        let url, body;
        if (isEdit) {
          // For edit, send direct payload
          url = `/schedules/update/${editId}`;
          body = payload;
        } else {
          // For add, wrap in schedules array (even if one)
          url = '/schedules/add';
          body = { schedules: [payload] };
        }

        const res = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });

        if(res.ok){
          closeModal();
          calendar.refetchEvents();
          loadSchedulesData(); // Reload DataTable
          const message = await res.text();
          Swal.fire({ icon: 'success', title: 'Success', text: message, timer: 2000, showConfirmButton: false });
        } else {
          const msg = await res.text();
          Swal.fire({ icon: 'error', title: 'Failed', text: msg || 'Error saving schedule' });
        }
      });

      // Export functionality
      function showExportModal(type) {
        let title, placeholder, endpoint;

        if (type === 'program') {
          title = 'Export Schedules by Program';
          placeholder = 'Enter program name (e.g., BSIT)';
          endpoint = '/schedules/export/program';
          focus(); // Focus input field
        } else {
          title = 'Export Schedules by Professor';
          placeholder = 'Enter professor name (e.g., John Doe)';
          endpoint = '/schedules/export/professor';
          focus(); // Focus input field
        }

        Swal.fire({
          title: title,
          input: 'text',
          inputPlaceholder: placeholder,
          showCancelButton: true,
          confirmButtonText: 'Export Excel',
          cancelButtonColor: '#6B7280',
          confirmButtonColor: '#10B981',
          inputValidator: (value) => {
            if (!value) {
              return 'Please enter a value!';
            }
          }
        }).then(async (result) => {
          if (result.isConfirmed) {
            try {
              const url = `${endpoint}?${type}=${encodeURIComponent(result.value)}`;
              const link = document.createElement('a');
              link.href = url;
              link.download = `${result.value.replace(/\s+/g, '_')}_schedules.xls`;
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);

              Swal.fire({
                icon: 'success',
                title: 'Export Started',
                text: `Your Excel file with all year-sections for ${result.value} will download shortly.`,
                timer: 2000,
                showConfirmButton: false
              });
            } catch (error) {
              console.error(`Error exporting ${result.value} schedules:`, error);
              Swal.fire({
                icon: 'error',
                title: 'Export Failed',
                text: `Failed to export ${result.value} schedules. Please try again.`,
                confirmButtonColor: '#10B981'
              });
            }
          }
        });
      }

      // DataTable initialization
      let schedulesDataTable;
      
      // Initialize DataTable
      function initializeDataTable() {
        schedulesDataTable = $('#schedulesTable').DataTable({
          responsive: true,
          processing: true,
          serverSide: false,
          ajax: {
            url: '/schedules/data',
            type: 'GET',
            dataSrc: 'data'
          },
          columns: [
            { data: 'room_name', name: 'room_name' },
            { data: 'course', name: 'course' },
            { data: 'program', name: 'program', defaultContent: '-' },
            { 
              data: null,
              render: function(data, type, row) {
                return `${row.year || ''} ${row.section || ''}`.trim() || '-';
              }
            },
            { data: 'unit', name: 'unit', defaultContent: '-' },
            { data: 'faculty_name', name: 'faculty_name' },
            { 
              data: null,
              render: function(data, type, row) {
                if (row.start_date && row.last_date) {
                  return `${row.start_date} to ${row.last_date}`;
                }
                return row.start_date || '-';
              }
            },
            { data: 'day_of_week', name: 'day_of_week', defaultContent: '-' },
            { 
              data: null,
              render: function(data, type, row) {
                return `${row.start_time} - ${row.end_time}`;
              }
            },
            { 
              data: 'room_type',
              render: function(data, type, row) {
                return row.room_type || 'Unknown';
              }
            },
            {
              data: null,
              orderable: false,
              searchable: false,
              render: function(data, type, row) {
                return `
                  <div class="flex items-center gap-2">
                    <button onclick="editSchedule(${row.id})" class="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-colors" title="Edit Schedule">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                      </svg>
                    </button>
                    <button onclick="deleteSchedule(${row.id})" class="p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg transition-colors" title="Delete Schedule">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                      </svg>
                    </button>
                  </div>
                `;
              }
            }
          ],
          drawCallback: function() {
            // Update schedule count on each draw
            try {
              const count = this.api().data().length;
              document.getElementById('scheduleCount').textContent = count;
            } catch (error) {
              console.error('Error updating schedule count:', error);
              document.getElementById('scheduleCount').textContent = '0';
            }

            // Animate visible rows smoothly using RAF
            const api = this.api();
            const nodes = api.rows({ page: 'current' }).nodes();
            const $rows = $(nodes);
            $rows.removeClass('animate-row');
            $rows.css('--i', null);

            requestAnimationFrame(() => {
              for (let i = 0; i < nodes.length; i++) {
                nodes[i].style.setProperty('--i', i);
              }
              // Force reflow once
              void nodes[0] && nodes[0].offsetWidth;
              for (let i = 0; i < nodes.length; i++) {
                nodes[i].classList.add('animate-row');
              }
            });
          },
          order: [[0, 'asc']],
          pageLength: 10,
          lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]],
          dom: '<"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-4"<"flex items-center gap-2"l><"flex items-center gap-2"f>>rt<"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mt-4"<"flex items-center gap-2"i><"flex items-center gap-2"p>>',
          language: {
            search: "",
            searchPlaceholder: "Search schedules...",
            lengthMenu: "Show _MENU_ entries",
            info: "Showing _START_ to _END_ of _TOTAL_ entries",
            infoEmpty: "No entries found",
            infoFiltered: "(filtered from _MAX_ total entries)",
            paginate: {
              first: "First",
              last: "Last",
              next: "Next",
              previous: "Previous"
            },
            emptyTable: "No schedules found",
            processing: "Loading schedules..."
          },
          initComplete: function() {
            // Initial schedule count
            try {
              const count = this.api().data().length;
              document.getElementById('scheduleCount').textContent = count;
            } catch (error) {
              console.error('Error updating schedule count:', error);
              document.getElementById('scheduleCount').textContent = '0';
            }
          }
        });
      }

      // Load schedules data
      async function loadSchedulesData() {
        try {
          const response = await fetch('/schedules/data');
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const result = await response.json();
          
          if (schedulesDataTable) {
            schedulesDataTable.clear();
            if (result.data && Array.isArray(result.data)) {
              schedulesDataTable.rows.add(result.data);
            }
            schedulesDataTable.draw();
          }
        } catch (error) {
          console.error('Error loading schedules data:', error);
          // Show error message to user
          Swal.fire({
            icon: 'error',
            title: 'Error Loading Data',
            text: 'Failed to load schedules data. Please refresh the page.',
            confirmButtonColor: '#10B981'
          });
        }
      }
       /* ===========================
   BUILDING MODAL KEYBOARD SHORTCUTS
   =========================== */
document.addEventListener('keydown', (event) => {
  const modal = document.getElementById('addModal');
  const form = document.getElementById('addScheduleForm');
  const isModalOpen = !modal.classList.contains('hidden');

  // === Ctrl + Enter → Open modal & focus Building Name ===
  if (event.ctrlKey && event.key === 'Enter') {
    event.preventDefault();
    openModal();
    setTimeout(() => {
      document.getElementById('room_id')?.focus();
    }, 100);
  }

  // === Enter → Move to next input field ===
 if (event.key === 'Enter' && !event.ctrlKey && isModalOpen) {
  const active = document.activeElement;
  const inputs = Array.from(form.querySelectorAll('input, select, textarea, button'));
  const index = inputs.indexOf(active);

  // ✅ Special handling for <select>
  if (active && active.tagName === 'SELECT') {
    const hasValue = active.value && active.value.trim() !== 'Select a room' && active.value.trim() !== 'Select a day...';

    if (!hasValue) {
      // If no value yet, allow default Enter (opens dropdown)
      return;
    } else {
      // If value already selected, move to next field
      event.preventDefault();
      if (index > -1 && index < inputs.length - 1) {
        inputs[index + 1].focus();
      } else if (index === inputs.length - 1) {
        form.requestSubmit();
      }
      return;
    }
  }

  // ✅ For all other input types
  if (index > -1 && index < inputs.length - 1) {
    event.preventDefault();
    inputs[index + 1].focus();
  } else if (index === inputs.length - 1) {
    event.preventDefault();
    form.requestSubmit();
  }
}

  // === Ctrl + D → Clear all fields ===
  if (event.ctrlKey && event.key.toLowerCase() === 'd' && isModalOpen) {
    event.preventDefault();
    form.reset();
    document.getElementById('roomName')?.focus();
    Swal.fire({
      toast: true,
      position: 'bottom-end',
      icon: 'info',
      title: 'All fields cleared.',
      showConfirmButton: false,
      timer: 1200
    });
  }

  // === Esc → Clear only current textbox ===
  if (!event.ctrlKey && event.key === 'Escape' && isModalOpen) {
    const active = document.activeElement;
    if (active && active.tagName === 'INPUT') {
      event.preventDefault();
      active.value = '';
      Swal.fire({
        toast: true,
        position: 'bottom-end',
        icon: 'info',
        title: 'Textbox cleared.',
        showConfirmButton: false,
        timer: 800
      });
    }
  }

  // === Ctrl + B → Cancel / Close modal ===
  if (event.ctrlKey && event.key.toLowerCase() === 'b' && isModalOpen) {
    event.preventDefault();
    closeModal();
    Swal.fire({
      toast: true,
      position: 'bottom-end',
      icon: 'warning',
      title: 'Modal closed.',
      showConfirmButton: false,
      timer: 1000
    });
  }
});


      // Edit schedule function
      window.editSchedule = async function(id) {
        try {
          const response = await fetch(`/schedules/get/${id}`);
          const schedule = await response.json();
          
          if (schedule.error) {
            Swal.fire({ icon: 'error', title: 'Error', text: 'Schedule not found' });
            return;
          }

          // Load rooms first for edit
          await loadRooms();

          // Fill form with schedule data
          document.querySelector('select[name="room_id"]').value = schedule.room_id || '';
          document.querySelector('input[name="course"]').value = schedule.course || '';
          document.querySelector('input[name="program"]').value = schedule.program || '';
          document.querySelector('input[name="year"]').value = schedule.year || '';
          document.querySelector('input[name="section"]').value = schedule.section || '';
          document.querySelector('input[name="unit"]').value = schedule.unit || '';
          document.querySelector('input[name="faculty_name"]').value = schedule.faculty_name || '';
          document.querySelector('input[name="start_date"]').value = schedule.start_date || '';
          document.querySelector('input[name="last_date"]').value = schedule.last_date || '';
          document.querySelector('select[name="day_of_week"]').value = schedule.day_of_week || '';
          document.querySelector('input[name="start_time"]').value = schedule.start_time || '';
          document.querySelector('input[name="end_time"]').value = schedule.end_time || '';
          document.querySelector('input[name="is_recurring"]').checked = !!schedule.is_recurring;
          document.querySelector('input[name="color_code"]').value = schedule.color_code || '#10B981';

          // Update modal title
          document.querySelector('#addModal h3').textContent = 'Edit Schedule';
          
          // Store edit ID
          document.getElementById('addScheduleForm').setAttribute('data-edit-id', id);
          
          // Open modal
          document.getElementById('addModal').classList.remove('hidden');
          document.getElementById('addModal').classList.add('flex');
          
        } catch (error) {
          console.error('Error loading schedule:', error);
          Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to load schedule data' });
        }
      };

      // Delete schedule function
      window.deleteSchedule = async function(id) {
        const confirm = await Swal.fire({
          title: 'Are you sure?',
          text: "This schedule will be permanently deleted.",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#ef4444',
          cancelButtonColor: '#6b7280',
          confirmButtonText: 'Yes, delete it!'
        });

        if (!confirm.isConfirmed) return;

        try {
          const response = await fetch('/schedules/delete', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id })
          });

          const result = await response.text();
          
          Swal.fire({
            icon: 'success',
            title: 'Deleted!',
            text: result,
            timer: 1500,
            showConfirmButton: false
          });

          // Reload data
          loadSchedulesData();
          calendar.refetchEvents();
          
        } catch (error) {
          console.error('Error deleting schedule:', error);
          Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to delete schedule' });
        }
      };

      // Initialize DataTable when page loads
      try {
        initializeDataTable();
        // Load initial data
        loadSchedulesData();
      } catch (error) {
        console.error('Error initializing DataTable:', error);
        // Show fallback message
        document.getElementById('schedulesTableBody').innerHTML = `
          <tr>
            <td colspan="11" class="px-6 py-4 text-center text-gray-500">
              Error loading schedules. Please refresh the page.
            </td>
          </tr>
        `;
      }
    });

   document.addEventListener('keydown', (event) => {
  if (event.ctrlKey && event.altKey) {
    switch (event.key.toLowerCase()) {
      case 'c': // Ctrl + Alt + C → Add College
        window.location.href = '/colleges';
        break;
      case 'b': // Ctrl + Alt + B → Add Building
        window.location.href = '/buildings';
        break;
      case 'r': // Ctrl + Alt + R → Add Room
        window.location.href = '/rooms';
        break;
      case 's': // Ctrl + Alt + S → Add Schedule
        window.location.href = '/schedules';
        break;
      case 'd': // Ctrl + Alt + D → Go to Dashboard
        window.location.href = '/dashboard';
        break;
       case 'l': // Ctrl + Alt + L → Go to Logout
        window.location.href = '/logout';
        break;
      case 'a': // Ctrl + Alt + A → Go to Home
        window.location.href = '/settings';
        break;
      default:
        return;
    }

    // Prevent default browser actions (optional)
    event.preventDefault();
  }
});
  </script>

  <!-- DataTable JS -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.7/js/dataTables.tailwindcss.min.js"></script>
  <script src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
  <script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>

</main>
{{> footer}}