{{> head title="Dashboard" }}

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.min.js"></script>

{{> sidebar }}

<main class="main-content min-h-screen p-4 md:p-8 bg-gray-50 transition-all duration-300">
  <div class="max-w-7xl mx-auto">
    <!-- Header -->
    <div class="flex items-center justify-between mb-6 animate-fade-in">
      <div>
        <!-- <nav class="text-sm text-slate-600">Home / Dashboard</nav> -->
        <h2 class="text-2xl font-semibold text-slate-900">Dashboard</h2>
        <p class="text-sm text-slate-600">Welcome back! Here's an overview of your system</p>
      </div>
    </div>

    {{#if error}}
    <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6 animate-pulse">
      <p>{{error}}</p>
    </div>
    {{/if}}

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8">
      <!-- Total Colleges -->
      <div class="bg-white rounded-lg border border-slate-200 p-6 hover:shadow-lg hover:border-emerald-300 transition-all duration-300 transform hover:-translate-y-1">
        <div class="flex items-center justify-between">
          <div>
            <div class="text-xs font-medium text-slate-500 uppercase tracking-wide mb-1">Total Colleges</div>
            <div class="text-2xl font-bold text-slate-900">{{stats.totalColleges}}</div>
          </div>
          <div class="w-12 h-12 bg-emerald-50 rounded-lg flex items-center justify-center">
            <svg class="w-6 h-6 text-emerald-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
            </svg>
          </div>
        </div>
        <a href="/colleges" class="text-xs text-emerald-600 hover:text-emerald-700 mt-2 inline-block">View all →</a>
      </div>

      <!-- Total Buildings -->
      <div class="bg-white rounded-lg border border-slate-200 p-6 hover:shadow-lg hover:border-emerald-300 transition-all duration-300 transform hover:-translate-y-1">
        <div class="flex items-center justify-between">
          <div>
            <div class="text-xs font-medium text-slate-500 uppercase tracking-wide mb-1">Total Buildings</div>
            <div class="text-2xl font-bold text-slate-900">{{stats.totalBuildings}}</div>
          </div>
          <div class="w-12 h-12 bg-emerald-50 rounded-lg flex items-center justify-center">
            <svg class="w-6 h-6 text-emerald-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
            </svg>
          </div>
        </div>
        <a href="/buildings" class="text-xs text-emerald-600 hover:text-emerald-700 mt-2 inline-block">View all →</a>
      </div>

      <!-- Total Capacity -->
      <div class="bg-white rounded-lg border border-slate-200 p-6 hover:shadow-lg hover:border-emerald-300 transition-all duration-300 transform hover:-translate-y-1">
        <div class="flex items-center justify-between">
          <div>
            <div class="text-xs font-medium text-slate-500 uppercase tracking-wide mb-1">Total Capacity</div>
            <div class="text-2xl font-bold text-slate-900">{{stats.totalCapacity}}</div>
          </div>
          <div class="w-12 h-12 bg-emerald-50 rounded-lg flex items-center justify-center">
            <svg class="w-6 h-6 text-emerald-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
          </div>
        </div>
        <a href="/rooms" class="text-xs text-emerald-600 hover:text-emerald-700 mt-2 inline-block">View all →</a>
      </div>

      <!-- Total Rooms -->
      <div class="bg-white rounded-lg border border-slate-200 p-6 hover:shadow-lg hover:border-emerald-300 transition-all duration-300 transform hover:-translate-y-1">
        <div class="flex items-center justify-between">
          <div>
            <div class="text-xs font-medium text-slate-500 uppercase tracking-wide mb-1">Total Rooms</div>
            <div class="text-2xl font-bold text-slate-900">{{stats.totalRooms}}</div>
          </div>
          <div class="w-12 h-12 bg-emerald-50 rounded-lg flex items-center justify-center">
            <svg class="w-6 h-6 text-emerald-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M4 5a1 1 0 011-1h4a1 1 0 011 1v7a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM14 5a1 1 0 011-1h4a1 1 0 011 1v7a1 1 0 01-1 1h-4a1 1 0 01-1-1V5zM4 16a1 1 0 011-1h4a1 1 0 011 1v3a1 1 0 01-1 1H5a1 1 0 01-1-1v-3zM14 16a1 1 0 011-1h4a1 1 0 011 1v3a1 1 0 01-1 1h-4a1 1 0 01-1-1v-3z" />
            </svg>
          </div>
        </div>
        <a href="/rooms" class="text-xs text-emerald-600 hover:text-emerald-700 mt-2 inline-block">View all →</a>
      </div>
    </div>

    <!-- Improved chart layout for better responsiveness and prevent overlap -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8">
      <!-- Bar Chart: Takes 2 columns on large screens -->
      <div class="lg:col-span-2 bg-white rounded-lg border border-slate-200 p-4 md:p-6 hover:shadow-md transition-all duration-300">
        <h2 class="text-lg md:text-xl font-semibold text-slate-900 mb-4">Rooms by Building</h2>
        <div class="w-full h-[300px] md:h-[400px] lg:h-[450px]">
          <canvas id="roomsByCollegeChart" class="w-full h-full"></canvas>
        </div>
      </div>

      <!-- Doughnut Chart: Takes 1 column on large screens, full width on mobile -->
      <div class="lg:col-span-1 bg-white rounded-lg border border-slate-200 p-4 md:p-6 hover:shadow-md transition-all duration-300">
        <h2 class="text-lg md:text-xl font-semibold text-slate-900 mb-4">Capacity Utilization</h2>
        <div class="w-full h-[300px] md:h-[400px] lg:h-[450px] flex items-center justify-center">
          <canvas id="capacityUtilizationChart" class="max-w-full max-h-full"></canvas>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    <div class="bg-white rounded-lg border border-slate-200 p-4 md:p-6 mb-8 hover:shadow-lg transition-all duration-300">
      <h2 class="text-lg md:text-xl font-semibold text-slate-900 mb-4">Quick Actions</h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-4">
        <a href="/colleges" class="flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:border-emerald-500 hover:bg-emerald-50 hover:shadow-md transition-all duration-300 transform hover:-translate-y-1">
          <div class="w-10 h-10 rounded-lg bg-emerald-100 flex items-center justify-center hover:bg-emerald-200 transition-colors">
            <svg class="w-5 h-5 text-emerald-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
            </svg>
          </div>
          <div>
            <h3 class="font-medium text-slate-900 hover:text-emerald-600 transition-colors">Add College</h3>
            <p class="text-xs text-slate-500">Create new college</p>
          </div>
        </a>
        <a href="/buildings" class="flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:border-emerald-500 hover:bg-emerald-50 hover:shadow-md transition-all duration-300 transform hover:-translate-y-1">
          <div class="w-10 h-10 rounded-lg bg-emerald-100 flex items-center justify-center hover:bg-emerald-200 transition-colors">
            <svg class="w-5 h-5 text-emerald-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
            </svg>
          </div>
          <div>
            <h3 class="font-medium text-slate-900 hover:text-emerald-600 transition-colors">Add Building</h3>
            <p class="text-xs text-slate-500">Create new building</p>
          </div>
        </a>
        <a href="/rooms" class="flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:border-emerald-500 hover:bg-emerald-50 hover:shadow-md transition-all duration-300 transform hover:-translate-y-1">
          <div class="w-10 h-10 rounded-lg bg-emerald-100 flex items-center justify-center hover:bg-emerald-200 transition-colors">
            <svg class="w-5 h-5 text-emerald-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
            </svg>
          </div>
          <div>
            <h3 class="font-medium text-slate-900 hover:text-emerald-600 transition-colors">Add Room</h3>
            <p class="text-xs text-slate-500">Create new room</p>
          </div>
        </a>
        <a href="/schedules" class="flex items-center gap-3 p-4 border border-slate-200 rounded-lg hover:border-emerald-500 hover:bg-emerald-50 hover:shadow-md transition-all duration-300 transform hover:-translate-y-1">
          <div class="w-10 h-10 rounded-lg bg-emerald-100 flex items-center justify-center hover:bg-emerald-200 transition-colors">
            <svg class="w-5 h-5 text-emerald-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
            </svg>
          </div>
          <div>
            <h3 class="font-medium text-slate-900 hover:text-emerald-600 transition-colors">Add Schedule</h3>
            <p class="text-xs text-slate-500">Create new schedule</p>
          </div>
        </a>
      </div>
    </div>
  </div>
</main>
<script>
  
  let chartData;
  try {
    chartData = JSON.parse('{{{chartData}}}');
    console.log('Parsed chartData:', chartData);
  } catch (e) {
    console.error('JSON parsing error:', e);
    chartData = {
      roomsByBuilding: [],
      capacityUsed: 0,
      capacityAvailable: 0
    };
  }

  // Prepare data for bar chart
  const roomsByBuildingData = {
    labels: chartData.roomsByBuilding.map(item => item.name),
    values: chartData.roomsByBuilding.map(item => item.rooms),
  };

  // Bar Chart: Rooms by Building
  const roomsByBuildingCtx = document.getElementById('roomsByCollegeChart').getContext('2d');
  new Chart(roomsByBuildingCtx, {
    type: 'bar',
    data: {
      labels: roomsByBuildingData.labels,
      datasets: [{
        label: 'Number of Rooms',
        data: roomsByBuildingData.values,
        backgroundColor: (context) => {
          const chart = context.chart;
          const { ctx, chartArea } = chart;
          if (!chartArea) return null;
          return getGradient(ctx, chartArea, 'vertical', ['#10B981', '#065F46']);
        },
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 1,
        borderRadius: 5,
      }],
    },
    options: {
      maintainAspectRatio: false,
      responsive: true,
      animation: { duration: 1000, easing: 'easeInOutQuad' },
      scales: {
        y: { beginAtZero: true, title: { display: true, text: 'Number of Rooms', font: { size: 14 } }, ticks: { font: { size: 12 } }, grid: { color: 'rgba(0, 0, 0, 0.1)' } },
        x: { title: { display: true, text: 'Buildings', font: { size: 14 } }, ticks: { font: { size: 12 } }, grid: { display: false } },
      },
      plugins: {
        legend: { display: false },
        title: { display: true, text: 'Rooms by Building', font: { size: 18 } },
        tooltip: { enabled: true, callbacks: { label: (context) => `${context.label}: ${context.raw} rooms` }, backgroundColor: 'rgba(0, 0, 0, 0.8)', titleFont: { size: 14 }, bodyFont: { size: 12 }, padding: 10 },
      },
      hover: { mode: 'nearest', intersect: true, animationDuration: 0 },
      onHover: (event, chartElement) => {
        event.native.target.style.cursor = chartElement[0] ? 'pointer' : 'default';
      },
    },
  });

  // Prepare data for doughnut chart
  const capacityData = {
    used: chartData.capacityUsed || 0,
    available: chartData.capacityAvailable || 0,
  };

  // Doughnut Chart: Capacity Utilization
  const capacityUtilizationCtx = document.getElementById('capacityUtilizationChart').getContext('2d');
  new Chart(capacityUtilizationCtx, {
    type: 'doughnut',
    data: {
      labels: ['Used', 'Available'],
      datasets: [{
        data: [capacityData.used, capacityData.available],
        backgroundColor: ['#10B981', '#64748B'], // Solid colors for Used and Available
        borderColor: ['rgba(16, 185, 129, 1)', 'rgba(100, 116, 139, 1)'],
        borderWidth: 1,
        borderRadius: 3,
      }],
    },
    options: {
      maintainAspectRatio: false,
      responsive: true,
      animation: { duration: 1000, easing: 'easeInOutQuad' },
      cutout: '70%',
      plugins: {
        legend: { position: 'bottom', labels: { font: { size: 10 }, color: 'rgba(0, 0, 0, 0.7)' } },
        title: { display: true, text: 'Capacity Utilization', font: { size: 14 } },
        tooltip: { enabled: true, callbacks: { label: (context) => `${context.label}: ${context.raw} capacity` }, backgroundColor: 'rgba(0, 0, 0, 0.8)', titleFont: { size: 12 }, bodyFont: { size: 10 }, padding: 8 },
      },
      hover: { mode: 'dataset', intersect: true, animationDuration: 0 },
      onHover: (event, chartElement) => {
        event.native.target.style.cursor = chartElement[0] ? 'pointer' : 'default';
      },
    },
  });

  function getGradient(ctx, chartArea, direction, colors1, colors2 = null) {
    const gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
    if (direction === 'vertical') {
      gradient.addColorStop(0, colors1[0]);
      gradient.addColorStop(1, colors1[1]);
    } else if (direction === 'radial' && colors2) {
      gradient.addColorStop(0, colors1[0]);
      gradient.addColorStop(0.5, colors1[1]);
      gradient.addColorStop(1, colors2[1]);
    }
    return gradient;
  }
  document.addEventListener('keydown', (event) => {
  if (event.ctrlKey && event.altKey) {
    switch (event.key.toLowerCase()) {
      case 'c': // Ctrl + Alt + C → Add College
        window.location.href = '/colleges';
        break;
      case 'b': // Ctrl + Alt + B → Add Building
        window.location.href = '/buildings';
        break;
      case 'r': // Ctrl + Alt + R → Add Room
        window.location.href = '/rooms';
        break;
      case 's': // Ctrl + Alt + S → Add Schedule
        window.location.href = '/schedules';
        break;
      case 'd': // Ctrl + Alt + D → Go to Dashboard
        window.location.href = '/dashboard';
        break;
       case 'l': // Ctrl + Alt + L → Go to Logout
        window.location.href = '/logout';
        break;
      case 'a': // Ctrl + Alt + A → Go to Home
        window.location.href = '/settings';
        break;
      default:
        return;
    }

    // Prevent default browser actions (optional)
    event.preventDefault();
  }
});
</script>
<style>
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  .animate-fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }
  .animate-pulse {
    animation: pulse 1.5s infinite;
  }
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.02); }
    100% { transform: scale(1); }
  }
</style>

{{> footer }}
