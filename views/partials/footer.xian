</main>
    </div>

    <!-- Updated footer with refined styling -->
<!-- partials/footer -->
<footer class="border-t border-slate-200 bg-white text-slate-600 text-sm transition-all duration-300">
  <div class="max-w-7xl mx-auto px-3 sm:px-6 py-6 sm:py-8">
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 sm:gap-8">
      <div>
        <div class="text-base font-semibold text-slate-900">MBC University</div>
        <p class="mt-2 text-slate-500 text-sm sm:text-base">Room Management System powered by XianFire.</p>
      </div>

      <!-- Collapsible sections on mobile -->
      <div>
        <button class="w-full flex items-center justify-between md:justify-start md:cursor-auto footer-toggle py-1 md:py-0 text-left">
          <span class="text-base font-semibold text-slate-900 mb-0 md:mb-3">Product</span>
          <svg class="w-4 h-4 md:hidden text-slate-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/></svg>
        </button>
        <ul class="mt-2 space-y-2 footer-content hidden md:block">
          <li><a href="/dashboard" class="hover:text-emerald-600 transition-colors">Dashboard</a></li>
          <li><a href="/colleges" class="hover:text-emerald-600 transition-colors">Colleges</a></li>
          <li><a href="/buildings" class="hover:text-emerald-600 transition-colors">Buildings</a></li>
          <li><a href="/rooms" class="hover:text-emerald-600 transition-colors">Rooms</a></li>
          <li><a href="/schedules" class="hover:text-emerald-600 transition-colors">Schedules</a></li>
          <li><a href="/settings" class="hover:text-emerald-600 transition-colors">Settings</a></li>
        </ul>
      </div>

      <div>
        <button class="w-full flex items-center justify-between md:justify-start md:cursor-auto footer-toggle py-1 md:py-0 text-left">
          <span class="text-base font-semibold text-slate-900 mb-0 md:mb-3">Resources</span>
          <svg class="w-4 h-4 md:hidden text-slate-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/></svg>
        </button>
        <ul class="mt-2 space-y-2 footer-content hidden md:block">
          <li><a href="#" class="hover:text-emerald-600 transition-colors">Documentation</a></li>
          <li><a href="#" class="hover:text-emerald-600 transition-colors">Support</a></li>
          <li><a href="#" class="hover:text-emerald-600 transition-colors">API Status</a></li>
        </ul>
      </div>

      <div>
        <button class="w-full flex items-center justify-between md:justify-start md:cursor-auto footer-toggle py-1 md:py-0 text-left">
          <span class="text-base font-semibold text-slate-900 mb-0 md:mb-3">Company</span>
          <svg class="w-4 h-4 md:hidden text-slate-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/></svg>
        </button>
        <ul class="mt-2 space-y-2 footer-content hidden md:block">
          <li><a href="#" class="hover:text-emerald-600 transition-colors">About</a></li>
          <li><a href="/privacy" class="hover:text-emerald-600 transition-colors">Privacy</a></li>
          <li><a href="/terms" class="hover:text-emerald-600 transition-colors">Terms</a></li>
          <li><a href="mailto:support@example.com" class="hover:text-emerald-600 transition-colors">Contact</a></li>
        </ul>
      </div>
    </div>
  </div>
</footer>

<style>
  /* Responsive footer margin to match main content */
  footer {
    transition: margin-left 0.3s ease;
  }

  /* Desktop: default margin to align with main content */
  @media (min-width: 768px) {
    footer {
      margin-left: 16rem; /* Matches main-content's margin-left */
    }

    /* Handle three cases so the footer moves when the sidebar is collapsed:
       1) footer is a descendant of an element with .sidebar-collapsed
       2) footer immediately follows #app-shell when #app-shell has the class
       3) legacy .sidebar-collapsed footer selector
    */
    #app-shell.sidebar-collapsed + footer,
    #app-shell.sidebar-collapsed footer,
    .sidebar-collapsed footer {
      margin-left: 4.5rem; /* Matches sidebar-collapsed main-content */
    }
  }

  /* Mobile: no margin to align with main content and compact layout */
  @media (max-width: 767px) {
    footer {
      margin-left: 0;
    }
    footer .max-w-7xl { padding-left: 12px; padding-right: 12px; }
    footer .footer-content { transition: max-height 0.22s ease; overflow: hidden; max-height: 0; }
    footer .footer-content.show { max-height: 420px; }
    footer .footer-toggle { width: 100%; }
    footer ul.space-y-2 li { font-size: 14px; }
    footer p { font-size: 13px; }
    footer .text-base { font-size: 16px; }
  }
</style>
    <script>
      // Sidebar collapse toggle
      const collapseBtn = document.getElementById('collapseBtn');
      if (collapseBtn) {
        collapseBtn.addEventListener('click', () => {
          document.getElementById('app-shell').classList.toggle('sidebar-collapsed');
        });
      }

      // Footer collapsible sections (mobile)
      document.querySelectorAll('.footer-toggle').forEach(btn => {
        btn.addEventListener('click', (e) => {
          // Only allow toggling on small screens
          if (window.innerWidth >= 768) return;
          const content = btn.nextElementSibling;
          if (!content) return;
          if (content.classList.contains('show')) {
            content.classList.remove('show');
            content.classList.add('hidden');
          } else {
            content.classList.remove('hidden');
            content.classList.add('show');
          }
        });
      });
      
      // Global duplicate-submit guard for modal forms with auto-reset
      // When any form is submitted, mark it as submitted and disable its submit buttons.
      // If the submission doesn't complete (no AJAX success), the guard auto-resets after a timeout
      // so the user can re-edit and resubmit.
      (function () {
        const DEFAULT_TIMEOUT = 2000; // ms

        function restoreFormState(form) {
          try { delete form.dataset.submitted; } catch (err) {}
          if (form._submitTimer) {
            clearTimeout(form._submitTimer);
            delete form._submitTimer;
          }
          const submits = form.querySelectorAll('button[type="submit"], input[type="submit"]');
          submits.forEach(btn => {
            try { btn.disabled = false; } catch (err) {}
            if (btn.tagName.toLowerCase() === 'button' && btn.dataset._origHtml) {
              btn.innerHTML = btn.dataset._origHtml;
              delete btn.dataset._origHtml;
            }
          });
        }

        // Expose a helper to clear submitted state from AJAX success handlers
        // Usage: window.clearFormSubmitted(formElement) or pass a selector/id
        window.clearFormSubmitted = function (formOrSelector) {
          let form = null;
          if (!formOrSelector) return;
          if (typeof formOrSelector === 'string') {
            form = document.querySelector(formOrSelector);
          } else if (formOrSelector instanceof HTMLFormElement) {
            form = formOrSelector;
          } else if (formOrSelector && formOrSelector.closest) {
            // maybe a button inside the form
            form = formOrSelector.closest('form');
          }
          if (!form) return;
          restoreFormState(form);
        };

        document.addEventListener('submit', function (e) {
          const form = e.target;
          if (!(form instanceof HTMLFormElement)) return;

          // If already submitted, stop further processing
          if (form.dataset.submitted === 'true') {
            e.preventDefault();
            e.stopImmediatePropagation();
            return false;
          }

          // Mark as submitted and disable submit controls
          form.dataset.submitted = 'true';
          const submits = form.querySelectorAll('button[type="submit"], input[type="submit"]');
          submits.forEach(btn => {
            try { btn.disabled = true; } catch (err) {}
            // store original label so we can restore later if needed
            if (btn.tagName.toLowerCase() === 'button') {
              btn.dataset._origHtml = btn.innerHTML;
              btn.innerHTML = btn.dataset._submittingLabel || 'Saving...';
            }
          });

          // Start/reset the auto-unlock timer
          if (form._submitTimer) {
            clearTimeout(form._submitTimer);
            delete form._submitTimer;
          }
          const timeoutMs = parseInt(form.dataset.submitTimeout) || DEFAULT_TIMEOUT;
          form._submitTimer = setTimeout(() => {
            // only restore if still marked submitted
            if (form.dataset.submitted === 'true') {
              restoreFormState(form);
            }
          }, timeoutMs);

          // Let other handlers (AJAX) run. We don't call preventDefault here.
        }, true); // use capture so it runs before bubble handlers

        // Clear submitted state when the form is reset (many modal close handlers call form.reset())
        document.addEventListener('reset', function (e) {
          const form = e.target;
          if (!(form instanceof HTMLFormElement)) return;
          restoreFormState(form);
        }, true);

        // Additionally clear submitted flag when modal is closed using common close/cancel buttons
        document.addEventListener('click', function (e) {
          const el = e.target;
          if (!(el instanceof Element)) return;
          // common ids/classes used for closing modals in this project
          const closeSelectors = ['#closeAddModal', '#cancelAdd', '.modal-close', '.close-modal', '.btn-cancel'];
          const shouldClose = closeSelectors.some(sel => el.closest(sel));
          if (!shouldClose) return;
          // find nearest modal container and clear any forms inside it
          const modal = el.closest('.fixed') || el.closest('[id$="Modal"]');
          if (!modal) return;
          modal.querySelectorAll('form').forEach(form => {
            restoreFormState(form);
          });
        });
      })();
    </script>
</body>
</html>
